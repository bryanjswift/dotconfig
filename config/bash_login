# Regular Colors
NONE="\[\033[0;0m\]"          # Color Off
BLACK="\[\033[0;30m\]"        # Black
RED="\[\033[0;31m\]"          # Red
GREEN="\[\033[0;32m\]"        # Green
YELLOW="\[\033[0;33m\]"       # Yellow
BLUE="\[\033[0;34m\]"         # Blue
PURPLE="\[\033[0;35m\]"       # Purple
CYAN="\[\033[0;36m\]"         # Cyan
WHITE="\[\033[0;37m\]"        # White
###### Prompt Setup ######
function get_git_branch {
  git branch | awk '/^\*/ { print substr($0, 3, (length - 2)) }'
}
function get_git_tag {
  #git name-rev HEAD --tags --name-only | grep -v '^undefined$' | awk '/(^.*?)(\^0)?$/ { printf " ["; printf $1; print "]"; }'
  #git describe HEAD | grep -v 'fatal:' | perl -p -i -e "s/^(.*?)(-[0-9]+-g[a-zA-Z0-9]+)?$/ [\$1]/"
  git describe --exact-match HEAD 2>&1 | grep -v 'fatal' | awk '{ printf " ["; printf $1; print "] "; }'
}
function get_git_dirty {
  [[ 0 -eq `git status --porcelain | wc -l` ]] || echo '*'
}
function get_git_sha {
  git rev-parse --short HEAD | tr -d "\n"
}
PS1_DEFAULT="\h$YELLOW \w$NONE"'$(git branch &> /dev/null;\
  if [ 0 -eq $? ]; then\
    echo "$(get_git_tag)('$CYAN'$(get_git_branch)'$PURPLE'$(get_git_dirty)'$NONE')";\
  else\
    printf "";\
  fi;\
)'": "
PS1=$PS1_DEFAULT

###### Command Line ######
set -o vi

###### Environment Variables ######
# Source Control variables
export SVN_EDITOR=vim
export VISUAL=vim
export EDITOR=vim
# Dotconfig Home
if [ ! -n "$DOTCONFIG" ]; then
  export DOTCONFIG=$HOME/Documents/code/dotconfig
fi
# In bash history: ignore duplicates, `ls`, `bg`, `fg`, `exit` commands
export HISTIGNORE="&:ls:[bf]g:exit"

###### Path ######
export ORIG_PATH=$PATH
# add to the path
export PATH=/usr/local/bin:/usr/bin:/usr/sbin:/bin:/sbin # Reset PATH

source $DOTCONFIG/config/bash/ec2.bashrc
# If brew is on the path then include rbenv settings
if hash brew 2>/dev/null; then
  source $DOTCONFIG/config/bash/brew.bashrc
fi
# If rbenv is on the path then include rbenv settings
if hash rbenv 2>/dev/null; then
  source $DOTCONFIG/config/bash/rbenv.bashrc
fi
# if both fzf is on the path include fzf customizations
if hash fzf 2>/dev/null; then
  source $DOTCONFIG/config/bash/fzf.bashrc
fi
# If gpg-agent is on the path then include the things that enable gpg-agent
if hash gpg-agent 2>/dev/null; then
  source $DOTCONFIG/config/bash/gpg.bashrc
fi
# If go is on the path then include the things that support golang
if hash go 2>/dev/null; then
  source $DOTCONFIG/config/bash/golang.bashrc
fi
