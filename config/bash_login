# Regular Colors
NONE="\[\033[0;0m\]"          # Color Off
BLACK="\[\033[0;30m\]"        # Black
RED="\[\033[0;31m\]"          # Red
GREEN="\[\033[0;32m\]"        # Green
YELLOW="\[\033[0;33m\]"       # Yellow
BLUE="\[\033[0;34m\]"         # Blue
PURPLE="\[\033[0;35m\]"       # Purple
CYAN="\[\033[0;36m\]"         # Cyan
WHITE="\[\033[0;37m\]"        # White
###### Prompt Setup ######
function get_git_branch {
  git branch | awk '/^\*/ { print substr($0, 3, (length - 2)) }'
}
function get_git_tag {
  #git name-rev HEAD --tags --name-only | grep -v '^undefined$' | awk '/(^.*?)(\^0)?$/ { printf " ["; printf $1; print "]"; }'
  #git describe HEAD | grep -v 'fatal:' | perl -p -i -e "s/^(.*?)(-[0-9]+-g[a-zA-Z0-9]+)?$/ [\$1]/"
  git describe --exact-match HEAD 2>&1 | grep -v 'fatal' | awk '{ printf " ["; printf $1; print "] "; }'
}
function get_git_dirty {
  [[ 0 -eq `git status --porcelain | wc -l` ]] || echo '*'
}
function get_git_sha {
  git rev-parse --short HEAD | tr -d "\n"
}
PS1_DEFAULT="\h$YELLOW \w$NONE"'$(git branch &> /dev/null;\
  if [ 0 -eq $? ]; then\
    echo "$(get_git_tag)('$CYAN'$(get_git_branch)'$PURPLE'$(get_git_dirty)'$NONE')";\
  else\
    printf "";\
  fi;\
)'": "
PS1=$PS1_DEFAULT

###### Command Line ######
set -o vi

###### Environment Variables ######
# Source Control variables
export SVN_EDITOR=vim
export VISUAL=vim
export EDITOR=vim
# Dotconfig Home
export DOTCONFIG=$HOME/Documents/code/dotconfig
# In bash history: ignore duplicates, `ls`, `bg`, `fg`, `exit` commands
export HISTIGNORE="&:ls:[bf]g:exit"
# Homebrew
export CELLAR=`brew --cellar`
# environment variables for JVM development
export JAVA_HOME=$(/usr/libexec/java_home)
export SCALA_HOME=$HOME/Documents/src/scala/scala-2.8.0.final
export M2_REPOSITORY=$HOME/.m2/repository
export ANT_HOME=$(brew --cellar ant)/1.9.3
export CLOJURE_EXT=$HOME/Documents/src/clojure/clojure-classpath
export GAE_SDK=$HOME/Documents/src/gae/appengine-java-sdk-1.3.3
# EC2
export EC2_HOME=$HOME/.ec2
if [ -d $EC2_HOME ]; then
  export EC2_PRIVATE_KEY="$(/bin/ls "$EC2_HOME"/pk-*.pem | /usr/bin/head -1)"
  export EC2_CERT="$(/bin/ls "$EC2_HOME"/cert-*.pem | /usr/bin/head -1)"
  export EC2_AMITOOL_HOME="/usr/local/Library/LinkedKegs/ec2-ami-tools/jars"
  export EC2_ACCESS=`cat $EC2_HOME/access.key`
  export EC2_SECRET=`cat $EC2_HOME/secret.key`
fi
# Ruby
export RBENV=$HOME/.rbenv
export RUBIES=(~/.rbenv/versions/*)
# catalog files for compiling man pages
export XML_CATALOG_FILES="/opt/local/share/xml/docbook/4.2/catalog.xml /opt/local/share/xsl/docbook-xsl/catalog.xml"

###### Aliases ######
alias byword='open -a /Applications/Byword.app'

###### Path ######
export ORIG_PATH=$PATH
# add to the path
export PATH=/usr/local/bin:/usr/bin:/usr/sbin:/bin:/sbin # Reset PATH
export PATH=/usr/local/share/npm/bin:$PATH # Add NPM globals to PATH
export PATH=$RBENV/bin:$PATH # Add rbenv scripts to PATH

###### rbenv ######
eval "$(rbenv init -)"

###### bash autocomplete ######
# Homebrew autocomplete
if [ -f `brew --prefix`/etc/bash_completion ]; then
  . `brew --prefix`/etc/bash_completion
fi
# Maven autocomplete
if [ -f $DOTCONFIG/bash-completion/maven_bash_completion.bash ]; then
  . $DOTCONFIG/bash-completion/maven_bash_completion.bash
fi
# Heroku (hk) autocomplete
if [ -f $DOTCONFIG/bash-completion/hk-bash-completion.sh ]; then
  . $DOTCONFIG/bash-completion/hk-bash-completion.sh
fi
